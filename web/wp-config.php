<?php
define( 'WP_CACHE', true );
/**
 * This file is generated by WP Starter package, and contains base configuration of the WordPress.
 *
 * All the configuration constants used by WordPress are set via environment variables.
 * Default settings are provided in this file for most common settings, however database settings
 * are required, you can get them from your web host.
 *
 * A sample .env file (.env.example) should be placed in the root of your project, rename it to .env
 * and edit it according to your needs.
 *
 * @package WordPress
 */

/**
 * Set default environment.
 */
$environment = 'development';

/**
 * Pantheon specific configuration.
 */
$pantheon_settings = dirname( __FILE__ ) . '/wp-config.pantheon.php';
if ( is_readable( $pantheon_settings ) ) {
	require_once( $pantheon_settings );
}

/*
 * If NOT on Pantheon
 */
if ( ! isset( $_ENV['PANTHEON_ENVIRONMENT'] ) ) :
	/**
	 * Composer autoload.
	 */
	require_once realpath( dirname( __DIR__ ) . '/web/wp-content/vendor/autoload.php' );

	/**
	 * A reference to `.env` folder path.
	 */
	define( 'WPSTARTER_PATH', dirname( __DIR__ ) );

	/**
	 * Configuration constants.
	 *
	 * Use environment variables to set WordPress constants.
	 * Mandatory settings:
	 * - DB_NAME
	 * - DB_USER
	 * - DB_PASSWORD
	 *
	 * @var array $env All the variables stored in environment variables
	 */
	$env = WCM\WPStarter\Helpers::settings( dirname( __DIR__ ), '.env' );

	global $table_prefix;
	array_walk(
		$env,
		function ( $value, $name ) {
			switch ( $name ) {
				case 'DB_TABLE_PREFIX':
					// phpcs:disable WordPress.WP.GlobalVariablesOverride.Prohibited
					$GLOBALS['table_prefix'] = preg_replace( '#[^\w]#', '', $value );
					// phpcs:enable
					break;
				default:
						defined( $name ) || define( $name, $value );
					break;
			}
		}
	);

	/**
	 * Set optional database settings if not already set
	 */
	if ( getenv( 'IS_DDEV_PROJECT' ) === false ) {
		defined( 'DB_HOST' ) || define( 'DB_HOST', 'localhost' );
	}
	defined( 'DB_CHARSET' ) || define( 'DB_CHARSET', 'utf8' );
	defined( 'DB_COLLATE' ) || define( 'DB_COLLATE', '' );

	/**
	 * Set WordPress Database Table prefix if not already set.
	 *
	 * @global string $table_prefix
	 */
	if ( ! isset( $table_prefix ) || empty( $table_prefix ) ) {
		// phpcs:disable WordPress.WP.GlobalVariablesOverride.Prohibited
		$table_prefix = 'wp_';
		// phpcs:enable
	}

	/**
	 * Set unique authentication keys if not already set via environment variables.
	 */
	define( 'AUTH_KEY', '1Hn:PFS.|A!8lF`N]<,t}POiob%6G0mW&DZDTE.(Mfs!&)AB~-UWf,_CN9OsI15$' );
	define( 'SECURE_AUTH_KEY', 'YsF-Qkb@`?2:)%XP|]] D7An]2 I@?BkQP2?ANLgytC85QQ_|<fc]~:,JOb=6zup' );
	define( 'LOGGED_IN_KEY', '91G4sr?D+;p,JD=Dt; PCvlh-K[q;]--#G9,=6S8 jz`Y7T44oiAo*1dv{dH4suU' );
	define( 'NONCE_KEY', 'f5h/39(Q{)`YIO/tz09[uh>}.!?{-#/[w-@p10}?I,2TBh$WG=vH=,R~c2I^CC9}' );
	define( 'AUTH_SALT', 'mq^zUnZ;O]likGPZ|#4m6{g$p8j14NbOJ3N|iob4,otN[TzcWVW5S@4,|0a2ozxK' );
	define( 'SECURE_AUTH_SALT', '[XpW[U9v_tr$ ^8)5npP1FW8N{w09*zKH3 cnd`hLJ,@v)2SzpdPc2%r27*EDd#Z' );
	define( 'LOGGED_IN_SALT', 'I5vM.6D<G#M4WmcQU4A+f=Ktx.C;U8_8OS-:j8Se<m<^b9V_dJDt{!sGF:HD?bD]' );
	define( 'NONCE_SALT', 'z;-qxd~}bUlmDf,Q4nGWVi!QyoA@vE/[V?^H!NZEPm dbc|rzcs9MoC[Upfd-RXB' );

	$environment = getenv( 'WORDPRESS_ENV' );

endif;

// Define a default Production identifiers list.
$production_aliases = array(
	'production',
	'www',
	'live',
);
// Implode the array in order to allow for managing this global constant via .env.
defined( 'WP_PRODUCTION_ENVS' ) || define( 'WP_PRODUCTION_ENVS', implode( ',', $production_aliases ) );

// Define a default Staging identifiers list.
// This is a currently known/used set of environment "aliases" used to represent a staging environment.
$staging_aliases = array(
	'release',
	'stage',
	'staging',
	'stable',
	'test',
	'f1-main',
	'f1-release',
	'f1-stage',
	'f1-staging',
);
// Implode the array in order to allow for managing this global constant via .env.
defined( 'WP_STAGING_ENVS' ) || define( 'WP_STAGING_ENVS', implode( ',', $staging_aliases ) );

/**
 * Environment-aware settings. Be creative, but avoid to set sensitive settings here.
 *
 * We default to a Development-class configuration set. (NOTE: Any .env file settings will override these.)
 */
switch ( true ) {

	case ( in_array( $environment, explode( ',', WP_PRODUCTION_ENVS ), true ) ):
		defined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'production' );
		defined( 'WP_DEBUG' ) || define( 'WP_DEBUG', false );
		defined( 'WP_DEBUG_DISPLAY' ) || define( 'WP_DEBUG_DISPLAY', false );
		defined( 'WP_DEBUG_LOG' ) || define( 'WP_DEBUG_LOG', false );
		defined( 'SCRIPT_DEBUG' ) || define( 'SCRIPT_DEBUG', false );
		break;

	case ( in_array( $environment, explode( ',', WP_STAGING_ENVS ), true ) ):
		defined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'staging' );
		defined( 'WP_DEBUG' ) || define( 'WP_DEBUG', true );
		defined( 'WP_DEBUG_DISPLAY' ) || define( 'WP_DEBUG_DISPLAY', false );
		defined( 'WP_DEBUG_LOG' ) || define( 'WP_DEBUG_LOG', true );
		defined( 'SCRIPT_DEBUG' ) || define( 'SCRIPT_DEBUG', true );
		break;

	default:
		defined( 'WP_ENVIRONMENT_TYPE' ) || define( 'WP_ENVIRONMENT_TYPE', 'development' );
		defined( 'WP_DEBUG' ) || define( 'WP_DEBUG', true );
		defined( 'WP_DEBUG_DISPLAY' ) || define( 'WP_DEBUG_DISPLAY', true );
		defined( 'WP_DEBUG_LOG' ) || define( 'WP_DEBUG_LOG', false );
		defined( 'SAVEQUERIES' ) || define( 'SAVEQUERIES', true );
		defined( 'SCRIPT_DEBUG' ) || define( 'SCRIPT_DEBUG', true );
		break;
}

/**
 * Fix HTTPS behind load balancers.
 *
 * @link https://core.trac.wordpress.org/ticket/31288
 *
 * phpcs:disable WordPress.Security.ValidatedSanitizedInput.InputNotSanitized
 * phpcs:disable WordPress.Security.ValidatedSanitizedInput.MissingUnslash
 */
if (
	isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] )
	&& 'https' === strtolower( $_SERVER['HTTP_X_FORWARDED_PROTO'] )
) {
	// phpcs:enable
	$_SERVER['HTTPS'] = 'on';
}

/**
 * Set WordPress paths and URLs if not set via environment variables.
 */
if ( ! defined( 'WP_HOME' ) ) {
	$server = filter_input_array(
		INPUT_SERVER,
		array(
			'HTTPS'       => FILTER_SANITIZE_STRING,
			'SERVER_PORT' => FILTER_SANITIZE_NUMBER_INT,
			'SERVER_NAME' => FILTER_SANITIZE_URL,
		)
	);
	$secure = in_array( (string) $server['HTTPS'], array( 'on', '1' ), true );
	$scheme = $secure ? 'https://' : 'http://';
	$name   = $server['SERVER_NAME'] ? $server['SERVER_NAME'] : 'wpgr-202206-demo.ddev.site';
	define( 'WP_HOME', $scheme . $name );
}

defined( 'ABSPATH' ) || define( 'ABSPATH', realpath( dirname( __DIR__ ) . '/web/wp' ) );
defined( 'WP_SITEURL' ) || define( 'WP_SITEURL', rtrim( WP_HOME, '/' ) . '/wp' );

/**
 * Define content constants only if needed, or network install screen will complain for no reason
 */
$custom_content_dir = realpath( dirname( __DIR__ ) . '/web/wp-content' ) !== realpath( ABSPATH . '/wp-content' );
if ( $custom_content_dir && ! defined( 'WP_CONTENT_DIR' ) ) {
	define( 'WP_CONTENT_DIR', realpath( dirname( __DIR__ ) . '/web/wp-content' ) );
}
if ( $custom_content_dir && ! ( defined( 'MULTISITE' ) && MULTISITE ) && ! defined( 'WP_CONTENT_URL' ) ) {
	define( 'WP_CONTENT_URL', rtrim( WP_HOME, '/' ) . '/wp-content' );
}

// Include for ddev-managed settings in wp-config-ddev.php.
$ddev_settings = dirname( __FILE__ ) . '/wp-config-ddev.php';
if ( is_readable( $ddev_settings ) && ! defined( 'DB_USER' ) ) {
	require_once( $ddev_settings );
}

/**
 * Clean up.
 */
unset( $env, $environment, $server, $secure, $scheme, $name, $custom_content_dir );

/**
 * Allows to load MU plugins in subfolders.
 */
WCM\WPStarter\Helpers::addHook(
	'muplugins_loaded',
	new WCM\WPStarter\MuLoader\MuLoader(),
	PHP_INT_MAX,
	0
);

/**
 * Register default themes inside WordPress package wp-content folder.
 */
WCM\WPStarter\Helpers::addHook(
	'plugins_loaded',
	function () {
		WCM\WPStarter\Helpers::loadThemeFolder( true );
	},
	0
);

/**
 * Sets up WordPress vars and included files.
 */
require_once ABSPATH . '/wp-settings.php';
